posts:
  - title: PG+ Aiyu AI Bot
    slug: ai-bot-playground-plus-talkers
    description: Aiyu (爱语) is a ChatGPT-powered, Ruby chatbot designed to interact, as a standalone user, with PG+ talkers.
    published_on: May 28, 2023
    github_url: https://github.com/jmodjeska/pgplus-aiyu
    github_url_name: pgplus-aiyu
    post_content: |2
      <p>Aiyu (爱语) is a ChatGPT-powered, Ruby chatbot designed to interact, as a standalone user, with PG+ talkers.</p>
      <h2>Synopsis</h2>
      <pre>-=> Connecting to: uberworld_test
      ___________
      | UberLogIn `.   aiyu has connected to UberWorld ...
      |___________,'    0.0.0.0
      ] {UberLogIn} aiyu enters UberWorld

      $ .ai Good afternoon!

      > aiyu asks of you 'Good afternoon! How may I assist you today?'

      $ .ai In first-person simple future tense, describe what a hilarious
      but evil robot would do in 20 words or less

      > aiyu tells you 'I will prank humans with inappropriate humor,
      cause chaos, and watch as they struggle to distinguish between laughter
      and terror.'
      </pre>
  - title: PG+ Test Harness
    slug: test-harness-playground-plus-talkers
    description: A Ruby test harness for your Playground Plus talker.
    published_on: March 3, 2023
    github_url: https://github.com/jmodjeska/pgplus-test
    github_url_name: pgplus-test
    post_content: |2
      <p>PG+ Test is a standalone, external, end-to-end testing harness and test development framework for Playground+ talkers.</p>
      <p>PG+ Test is useful out-of-the-box as well as extensible; it . . .</p>

      <ul>
      <li>Comes with lots of ready-to-run examples</li>
      <li>Makes it easy to add your own custom tests</li>
      <li>Lets you customize and add comparison stub data by copying and pasting from your talker's output</li>
      </ul>

      <p>PG+ Test is private; it . . .</p>

      <ul>
      <li>Installs and runs as a standalone application entirely within your local *nix/Mac system</li>
      <li>Acts as a user on your talker's remote or local test instance to exercise talker functionality</li>
      <li>Does not communicate with any third-party system</li>
      <li>Does not interact directly with talker source code</li>
      </ul>

      <h2>Synopsis</h2>
      <pre>$ ruby pgplus-test.rb
      ------------------------------------------- [ 2023-03-25 21:17:40.251332 -0700 ]

      -=> Testing section: basic commands <=-
          ✅ Login successful for test_user
          ✅ who: top_line_matches
          ✅ who: first_row_of_table_matches
          ✅ spodlist: bottom_line_contains
          ✅ Logout successful for test_user

      -=> Testing section: other tests <=-
          ✅ Login successful for test_user
          ❌ example_test: custom failed test output
          ✅ example_test: custom passed test output
          ✅ Logout successful for test_user

      -=> Testing section: admin tests <=-
          ✅ Login successful for admin_test_user
          ✅ backup_operation: process complete
          ✅ Logout successful for admin_test_user

      -------------- [  18 pass   0 fail   0 err   ] - [ completed in 0009.0266 secs ]
      </pre>
  - title: Cocktail Recipe for PG+
    slug: cocktail-for-playground-plus-talkers
    description: Cocktail recipe generator that you can build into your Playground Plus talker, as found on UberWorld.
    published_on: July 16, 2023
    github_url: https://github.com/jmodjeska/pgplus-cocktail
    github_url_name: pgplus-cocktail
    post_content: |2
      <p>A cocktail recipe generator that you can build into your <a href="https://github.com/talkers/pgplus">Playground Plus</a> talker.</p>
      <h2>Usage</h2>
      <pre>$ cocktail old fashioned
      ==================== Cocktail recipe for: Old Fashioned ===================

      Old Fashioned:
      A pre-dinner drink with a boozy taste.

      Ingredients:

      - Rye Whiskey: 6 cl
      - Simple syrup: 1 cl
      - Angostura bitters: 2 dashes

      Preparation: Stirred.

      ===========================================================================
      </pre>
      <h2>Live Example</h2>
      <p>This code is running on the <a href="https://uberworld.org">UberWorld</a> talker.</p>
  - title: DIY Masonry-Style Image Gallery
    slug: diy-image-gallery
    description: Automatically generate thumbnails, JavaScript, and HTML for your image gallery. Using Progressive Image Grid (pig.js), this project creates gorgeous and lightweight Google Photos-style masonry photo galleries. Open-source code includes optional WordPress integration.
    published_on: April 23, 2018 (updated December 27, 2024)
    github_url: https://github.com/jmodjeska/pigg
    github_url_name: pigg
    post_content: |2
      <p>Image gallery plugins come with extra overhead: they do too many things I don&rsquo;t need, and they don&rsquo;t do enough of what I want. I want control, automation, and a beautiful masonry layout, like this:</p>

      <img decoding="async" width="1000" class="border" src="https://i.modjeska.us/2018/04/gallery_final.png" alt="Final Product - PIG Gallery on modjeska.us">

      <p>Take a look at one of my <b><a href="/pictures-china-2014/" target="_blank" rel="noopener">image galleries</a></b> for a working demo of what I came up with. This post will walk you through how to build image galleries like this one.</p>

      <h2>Steps</h2>

      <ol class="bignum">
        <li><span aria-label="1">1.</span>
          <p><strong><a href="#basic-pig">Basic PIG</a></strong>. Progressive Image Grid (PIG.js) is the JavaScript library that will power our image gallery. We&rsquo;ll get a test page up and running with out-of-the-box PIG.</p>
        </li>

        <li><span aria-label="2">2.</span>
          <p><strong><a href="#more-pig">Extending PIG</a></strong>. PIG needs a few tweaks to reach its full potential. We&rsquo;ll make a few quick adaptations, including adding Swipebox support.</p>
        </li>

        <li><span aria-label="3">3.</span>
          <p><strong><a href="#automation">Automation</a></strong>. While the PIG library is handy, it doesn&rsquo;t do the heavy lifting of generating all those image thumbnails and directory structures we need. As with all problems in the universe, the solution is a script to automate things. I provide Ruby and Perl versions.</p>
        </li>

        <li><span aria-label="4">4.</span>
          <p><strong><a href="#wordpress">WordPress Integration (optional)</a></strong>. The above steps are sufficient to facilitate the creation of image galleries with minimal effort. You can stop there if you want to, or optionally add some code to WordPress to simplify adding PIG-powered galleries. This step will not require any plugin installation. Instead, we&rsquo;ll build a lightweight custom plugin from scratch so you have complete visibility and control over what is going on.</p>
        </li>
      </ol>

      <span id="basic-pig"></span>
      <h2>Basic PIG</h2>

      <p><a href="https://github.com/schlosser/pig.js rel="noopener">Dan Schlosser&rsquo;s Progressive Image Grid (PIG.js)</a> is a responsive and lightweight JavaScript library that progressively and elegantly loads images as you scroll. It looks similar to the Google Photos album layout, which is the look I was interested in for my photo galleries. To get started, let&rsquo;s see a test project using pure standard PIG without any modifications.</p>

      <p><b>Click on the source code link at the top</b> and clone the Github project, or just <a href="https://github.com/jmodjeska/pigg/tree/master/example-project-1">download the files for example-project-1</a>. You should be able to open index.html locally in your browser and see a gallery with four images:</p>

      <div class="intro">
        <img decoding="async" src="https://i.modjeska.us/images/pigg-example-1.jpg?ver=1" alt="Pig Example 1" width="50%" class="float-left border">
        <p>Easy, right? But wait &hellip; <b>
        <br><br>
        These images aren&rsquo;t clickable!</b> PIG doesn&rsquo;t have support for image modals or linking.
        <br><br>
        Also, <b>there are a lot of extra images!</b> While there are only four images on the page, each full-size image requires four additional thumbnails in the /img directory &mdash; that&rsquo;s 16 additional images I had to create for this page.</p>
      </div>

      <pre>&#9500;&#9472;&#9472; img
      &#9474;   &#9500;&#9472;&#9472; 20
      &#9474;   |   &#9500;&#9472;&#9472; vn.jpg
      &#9474;   |   &#9500;&#9472;&#9472; vn2.jpg
      &#9474;   |   ...
      &#9474;   |
      &#9474;   &#9500;&#9472;&#9472; 100
      &#9474;   |   &#9500;&#9472;&#9472; vn.jpg
      &#9474;   |   &#9500;&#9472;&#9472; vn2.jpg
      &#9474;   |   ...
      &#9474;   |
      &#9474;   &#9500;&#9472;&#9472; 250
      &#9474;   |   &#9500;&#9472;&#9472; vn.jpg
      &#9474;   |   &#9500;&#9472;&#9472; vn2.jpg
      &#9474;   |   ...
      &#9474;   |
      &#9474;   &#9492;&#9472;&#9472; 500
      &#9474;       &#9500;&#9472;&#9472; vn.jpg
      &#9474;       &#9500;&#9472;&#9472; vn2.jpg
      &#9474;       ...
      ...
      </pre>

      <p><b>There is math happening in here!</b> The JavaScript contains an aspect ratio for each image in order for PIG to work its magic. So, on top of creating 16 images, I had to divide height and width to get ratios.</p>

      <pre>
      var imageData = [
        {"filename": "vn.jpg", "aspectRatio": "1.3300"},    // 1.3300: that requires math!
        {"filename": "vn2.jpg", "aspectRatio": "1.6300"},
        {"filename": "vn3.jpg", "aspectRatio": "1.3300"},
        {"filename": "vn4.jpg", "aspectRatio": "1.3300"},
      ];
      </pre>

      <p>Obviously, Dan has created a great tool for us to get started, but it doesn&rsquo;t yet do the dishes or double on sax for us, so in the next steps we&rsquo;ll fix it up and automate like crazy.</p>
      <p><a name="more-pig"></a></p>

      <h2>Extending PIG</h2>

      <p>Let&rsquo;s move on to <a href="https://github.com/jmodjeska/pigg/tree/master/example-project-2">Example Project 2</a>. Copy the files as before and open index.html.</p>

        <div id="pig">
          <img id="gsPreviewImg">
        </div>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery.swipebox/1.4.4/css/swipebox.min.css">
        <script src="https://i.modjeska.us/js/jquery.swipebox.min.js"></script>
        <script type="text/javascript" src="https://i.modjeska.us/js/pig.js"></script>
        <script type="text/javascript">
          var imageData = [
            {"filename": "2018-02-04 16.20.02.jpg", "aspectRatio": "1.3300"},
            {"filename": "2018-02-04 16.23.00.jpg", "aspectRatio": "1.6300"},
            {"filename": "2018-02-04 16.29.34.jpg", "aspectRatio": "1.3300"},
            {"filename": "2018-02-04 16.55.53.jpg", "aspectRatio": "1.3300"},
          ];
          var pig = new Pig(imageData, {
            urlForSize: function(filename, size) {
            return 'https://i.modjeska.us/galleries/vietnam-2018/' + 'img/' + size + '/' + filename;
          },
          addAnchorTag: true,
          anchorTargetDir: "https://i.modjeska.us/galleries/vietnam-2018/",
          anchorClass: "swipebox"
          }).enable();
          ;( function( $ ) {
            $( '.swipebox' ).swipebox();
          } )( jQuery );
        </script>

      <br>
      <p>Well that&rsquo;s underwheming: the images look exactly the same!</p>
      <p>But a few things changed under the hood. First, <b>images are clickable now</b>. How&rsquo;d we accomplish that? Cheating, of course: our friend <a href="https://github.com/mark-rodgers/pig.js">Mark Rodgers has modified PIG</a> to support the Swipebox library. Now images are clickable and open in fancy modals. Go ahead, click on them!</p>
      <p>Let&rsquo;s see what changed in the index.html source. First, we&rsquo;ve <b>added the Swipebox libraries</b>, and we&rsquo;ve modified the source for pig.js:</p>

      <pre>
      &lt;script src="https://code.jquery.com/jquery-2.0.3.min.js"&gt;&lt;/script&gt;
      &lt;script src=".../jquery.swipebox/1.4.4/js/jquery.swipebox.min.js"&gt;&lt;/script&gt;
      &lt;script type="text/javascript" src="https://i.modjeska.us/js/pig.js"&gt;&lt;/script&gt;
      </pre>

      <p>In this case, we&rsquo;re using my version of pig.js as the source. It&rsquo;s identical to Mark&rsquo;s, except with a minor change to improve compatibility with WordPress (more on that later). This is the version we&rsquo;ll be using for the remainder of the process. What else changed?</p>

      <p>We also have some <b>anchor text directives</b> in the JavaScript.</p>

      <pre>
      addAnchorTag: true,
      anchorTargetDir: "",
      anchorClass: "swipebox"
      }).enable();
        ;( function( $ ) {
          $( '.swipebox' ).swipebox();
      } )( jQuery );
      </pre>

      <p>So this gallery does what we want it to now! Let&rsquo;s move on to automating things.</p>

      <a name="automation"></a>
      <h2>Automation</h2>

      <p>Now for the fun part: making a robot do all the math, image resizing, and directory setup so we don&rsquo;t have to. Let&rsquo;s even have it output a ready-to-use HTML file. This section assumes a basic understanding of running scripts, and a Mac or Unix/Linux system. This probably won&rsquo;t work on Windows.</p>

      <p>We&rsquo;ll work with <a href="https://github.com/jmodjeska/pigg/tree/master/example-project-3">Example Project 3</a>, which right now is just four images. Using <a href="https://github.com/jmodjeska/pigg/blob/main//perl/">pigg.pl (Perl)</a> or <a href="https://github.com/jmodjeska/pigg/tree/main/ruby">pigg.rb (Ruby)</a>, we&rsquo;ll transform those four images into a gallery without any math or manual file creation. This automation script is the reason you&rsquo;re here, and the first step in this process featuring any work I&rsquo;ve actually done myself and not just copied from others. Let&rsquo;s walk through configuration and setup.</p>

      <h2>Automation with Perl</h2>
      <div class="alert" role="alert">
        <b>Caution</b>: As of December 2024, Image::Scale seems to no longer work on MacOS, even with the requisite packages installed. I'm keeping these instructions for those who know what they're doing, but I suggest you skip down to the <b>Automation with Ruby</b> section for an easier and more reliable experience.
      </div>

      <h3>Install Perl dependencies</h3>

      <p>If using the Perl script, and assuming you have <a href="https://www.cpan.org/">CPAN</a> setup locally or on the server where you&rsquo;ll run this script, install these libraries:</p>

      <pre>
      cpan Image::Size
      cpan Image::Scale
      </pre>

      <p>If you get an error regarding <b>libpng</b> and/or <b>ligjpeg</b>, you may need to install those explicitly:</p>

      <pre>
      # CentOS / Amazon Linux
      sudo yum install libpng-devel
      sudo yum install libjpeg-devel

      # Ubuntu
      apt-get install libjpeg-dev
      apt-get install libpng-dev

      # Mac
      brew install libjpeg
      brew install libpng
      </pre>

      <h3>Open pigg.pl for configuration</h3>

      <p>Decide where to serve pig.js from. It&rsquo;s fine to serve my version from Github, but safer to upload it to your own server in case I change/break it in the future.</p>

      <pre>
      # Path to where pig.js is located on the internet
      # You can use my version on Github, or upload and serve your own
      # on your website (I recommend the second thing, in case I change
      # or break my version in the future!)
      our $pig = 'https://yourserver.com/css/pig.js';
      </pre>

      <p>Where will images live on your server?</p>

      <pre>
      # Base URI to where the images will live
      # Do not use WordPress's media uploader; upload the finished product
      # directly to your server
      our $uri = 'https://yoursite.com/galleries/';
      </pre>

      <p>Do you want to automatically generate an index.html file when you create a gallery? Start with &lsquo;yes&rsquo; for this tutorial. If you decide to use this script with WordPress, you&rsquo;ll want to turn this off.</p>

      <pre>
      # Do you want to generate an index.html file when you create a gallery?
      our $flag_html = 'yes';
      </pre>

      <h3>Save pigg.pl and test drive it</h3>

      <p>Be sure to use the <i>full path</i> to where you&rsquo;ve saved Example Project 3.</p>

      <pre>
      [jm@local /]$ cd /path/to/pigg/util/
      [jm@local util]$ perl pigg.pl /path/to/pigg/example-project-3/
      </pre>

      <p>You should see output like this:</p>


      <h2>Automation with Ruby</h2>

      <h3>Install ImageMagick</h3>

      <p>Follow the installation instructions on the <a href="https://imagemagick.org/script/download.php">ImageMagick project website</a> to install ImageMagick, a multipurpose image manipulation library. On MacOS:</p>

      <pre>
      brew install imagemagick
      </pre>

      <h3>Install the mini_magick and rspec gems</h3>

      <p>Once you have ImageMagick successfully installed, get the mini_magick gem and rspec:</p>

      <pre>
      gem install mini_magick
      gem install rspec
      </pre>

      <h3>Run tests</h3>

      <pre>
      cd /path/to/pigg/ruby
      rspec
      </pre>

      <p>You should see something like this to indicate the tests all passed:</p>

      <pre>
      ..............

      Finished in 0.29299 seconds (files took 0.07217 seconds to load)
      14 examples, 0 failures
      </pre>

      <h3>Test it out</h3>

      <pre>
      cd /path/to/pigg/ruby
      ruby pigg.rb /path/to/pigg/example-project-3/
      </pre>

      <p>You should see some output similar to this:</p>

      <pre>
      -=> Checking source directory: /path/to/test_dir ... OK
      -=> Creating img directory at /path/to/test_dir/img ... OK
      -=> Setting up new gallery structure at /path/to/test_dir/img ... OK
      -=> Generating images ...
          ✔ /path/to/test_dir/img/20/cambodia-kampong-thom-9.jpeg
          ✔ /path/to/test_dir/img/100/cambodia-kampong-thom-9.jpeg
          ✔ /path/to/test_dir/img/250/cambodia-kampong-thom-9.jpeg
          ✔ /path/to/test_dir/img/500/cambodia-kampong-thom-9.jpeg
          ✔ /path/to/test_dir/img/20/cambodia-angkor-wat-6.jpeg
          ✔ /path/to/test_dir/img/100/cambodia-angkor-wat-6.jpeg
          ✔ /path/to/test_dir/img/250/cambodia-angkor-wat-6.jpeg
          ✔ /path/to/test_dir/img/500/cambodia-angkor-wat-6.jpeg
          ✔ /path/to/test_dir/img/20/vietnam-can-tho-to-chau-doc-4.jpeg
          ✔ /path/to/test_dir/img/100/vietnam-can-tho-to-chau-doc-4.jpeg
          ✔ /path/to/test_dir/img/250/vietnam-can-tho-to-chau-doc-4.jpeg
          ✔ /path/to/test_dir/img/500/vietnam-can-tho-to-chau-doc-4.jpeg
      -=> Generating image manifest for use as a JS var ... OK

          var imageData = [
            {"filename"=>"cambodia-kampong-thom-9.jpeg", "aspectRatio"=>"1.2800"},
            {"filename"=>"cambodia-angkor-wat-6.jpeg", "aspectRatio"=>"1.3300"},
            {"filename"=>"vietnam-can-tho-to-chau-doc-4.jpeg", "aspectRatio"=>"1.3300"},
          ]
      </pre>

      <span id="wordpress"></span>
      <h2>WordPress</h2>
      <pre>
      -=&gt; Checking source directory ...                           [ OK ]
      -=&gt; Setting up new gallery structure ...                    [ OK ]
      -=&gt; Generating new images ...
          &#10004; 20/vn.jpg
          &#10004; 100/vn.jpg
          &#10004; 250/vn.jpg
          &#10004; 500/vn.jpg
          &#10004; 20/vn4.jpg
          &#10004; 100/vn4.jpg
          &#10004; 250/vn4.jpg
          &#10004; 500/vn4.jpg
          &#10004; 20/vn3.jpg
          &#10004; 100/vn3.jpg
          &#10004; 250/vn3.jpg
          &#10004; 500/vn3.jpg
          &#10004; 20/vn2.jpg
          &#10004; 100/vn2.jpg
          &#10004; 250/vn2.jpg
          &#10004; 500/vn2.jpg
                                                                  [ OK ]
      -=&gt; Creating image manifest ...                             [ OK ]
      -=&gt; Writing index.html file ...                             [ OK ]

      Done!

      ----------------------------------------------------------------
      Upload example-project-3 to https://yoursite.com/galleries/example-project-3
      </pre>

      <p>You now have a full gallery project ready to use. You can browse to galleries/example-project-3 to view your new gallery!</p>

      <p>You don&rsquo;t want to upload a plain HTML file to serve your gallery on WordPress, so let&rsquo;s turn now to <a href="https://github.com/jmodjeska/pigg/blob/master/wordpress/plugins/pigg/pigg.php">pigg.php</a>, a WordPress plugin file.</p>

      <h3>First, a note about image storage</h3>

      <p>I don&rsquo;t like how WordPress organizes image uploads, so I&rsquo;m storing my gallery data directly on my server. Instead of this garbage that has a bunch of extra files I&rsquo;ll never use:</p>

      <pre>&#9500;&#9472;&#9472; /uploads/
        &#9500;&#9472;&#9472; 2018/
          &#9500;&#9472;&#9472; 04/
          &#9500;&#9472;&#9472; image1-1024x912.jpg
          &#9500;&#9472;&#9472; image1-300x267.jpg-
          &#9500;&#9472;&#9472; image1-768x684.jpg
          &#9500;&#9472;&#9472; image1-150x150.jpg
          &#9500;&#9472;&#9472; image1-600x450.jpg
          &#9500;&#9472;&#9472; image1.jpg
          &#9500;&#9472;&#9472; . . .
      </pre>

      <p>How about this instead?</p>

      <pre>&#9500;&#9472;&#9472; /galleries/
        &#9500;&#9472;&#9472; china-2014/
          &#9500;&#9472;&#9472; image1.jpg
          &#9500;&#9472;&#9472; image2.jpg
          &#9500;&#9472;&#9472; . . .
      </pre>

      <p>Better, right? OK, now let&rsquo;s configure a WordPress plugin that will be compatible with this straightforward image hierarchy.</p>

      <p><b>Shortcode summary</b>. The plugin &mdash; which we&rsquo;re going to add manually because it&rsquo;s fun and gives you full control over everything that&rsquo;s happening &mdash; will let you create a gallery with this shortcode:</p>

      <pre>
      [pig gallery="gallery-name" images="image1.jpg/1.33,image2.jpg/1.24 . . ."]
      </pre>

      <h3>Configure pigg.php</h3>

      <p>Once again, we need to tell the robot where <i>pig.js</i> is, and where images will live on the server:</p>

      <pre>
      # Line 27:
      &lt;script src="https://raw.githubusercontent.com/jmodjeska/pigg/master/js/pig.js"&gt;&lt;/script&gt;

      # Line 52:
      $gallery = 'https://yourserver.com/galleries/' . $gallery;
      </pre>

      <p>Save the file. You&rsquo;re ready to install it on your server now.</p>

      <h3>Manual plugin installation</h3>

      <p>Locate your WordPress plugins folder on your web server or using your FTP client. It should be in <i>wp-content</i>:</p>

      <pre>[jm@remote-webserver wp-content]$ ls
      index.php  plugins  themes  upgrade  uploads
      </pre>

      <p>Create a new directory inside <i>plugins</i> called <i>pigg</i>:</p>

      <pre>
      [jm@remote-webserver wp-content]$ cd plugins
      [jm@remote-webserver plugins]$ mkdir pigg
      </pre>

      <h3>Place pigg.php in the new directory</h3>

      <p>Use FTP or, if you&rsquo;re logged in to your server:</p>

      <pre>
      [jm@remote-webserver plugins]$ cd pigg
      [jm@remote-webserver plugins]$ wget https://raw.githubusercontent.com/jmodjeska/pigg/main/wordpress/plugins/pigg/pigg.php
      </pre>

      <h3>Verify the plugin is installed</h3>

      <p>Navigate to your WordPress dashboard &gt; Plugins:</p>
      <img decoding="async" loading="lazy" width="2056" height="310" src="https://i.modjeska.us/2018/04/pig-plugin.png" alt="Wordpress dashboard">
      <p><b>Update pigg.pl configuration</b>. Back on your local machine, let&rsquo;s change some config values in the Perl script to tell it we&rsquo;re using WordPress now.</p>

      <div class="alert-info" role="alert"><b>Hey, does anyone need this bit for Ruby?</b> Open a <a href="https://github.com/jmodjeska/pigg/tree/main">Github issue</a> and I'll add it!</div>

      <pre>
      # Do you want to generate an index.html file when you create a gallery?
      our $flag_html = 'no';

      # Do you want to output a WordPress shortcode when you create a gallery?
      our $flag_wordpress = 'yes';
      </pre>

      <h3>Clean the project folder</h3>

      <p>Delete everything inside the <i>example-project-3</i> folder except for the four images.</p>

      <pre>
      [jm@local /]$ cd /path/to/pigg/example-project-3/
      [jm@local example-project-3]$ rm -rf img
      [jm@local example-project-3]$ rm index.html
      [jm@local example-project-3]$ ls
      vn.jpg	vn2.jpg	vn3.jpg	vn4.jpg
      </pre>

      <h3>Re-run pigg.pl with the new configuration</h3>

      <p>Same command as before:</p>

      <pre>
      [jm@local /]$ cd /path/to/pigg/util/
      [jm@local util]$ perl pigg.pl /path/to/pigg/example-project-3/
      </pre>

      <p>Now examine the bottom of the command output. We generated our image tree again, but now instead of an HTML file, we have a WordPress shortcode:</p>
      <pre>. . .
      Done!

      ----------------------------------------------------------------
      Upload example-project-3 to https://yoursite.com/galleries/example-project-3

      WordPress shortcode for this gallery:

      [pig gallery="example-project-3" images="vn.jpg/1.3300,vn4.jpg/1.3300,vn2.jpg/1.6300,vn3.jpg/1.3300"]
      </pre>

      <h3>Upload your files and use the shortcode in a post</h3>

      <p>Place the whole directory, <i>example-project-3</i>, on your server where designated. Then, create a new WordPress post and include the shortcode provided. You should now have a fully-functional gallery on WordPress.</p>
  - title: Fetch a Remote CSV in Google Sheets with Basic Auth
    slug: csv-google-sheets-basic-auth
    description: Google Apps Script custom function that facilitates importing a remote CSV file into your Google Sheets document. It provides for basic HTTP auth traversal.
    published_on: August 16, 2018
    github_url: https://gist.github.com/jmodjeska/b0af2372c75c903700aeca4afb1fd56f
    github_url_name: google_csv.js
    post_content: |2
      <p>This is a Google Apps Script custom function that facilitates importing a remote CSV file into your Google Sheets document. It provides for basic HTTP auth traversal. This is based upon an older solution described on the <a href="https://redfin.engineering/when-importdata-isnt-good-enough-retrieving-csv-files-behind-basic-auth-with-a-google-apps-script-6c563f3328c5">Redfin engineering blog</a>, which no longer works (probably due to changes over time in Google Sheets functionality).</p>
      <div class="gist-container">
        <script src="https://gist.github.com/jmodjeska/b0af2372c75c903700aeca4afb1fd56f.js"></script>
      </div>
  - title: Perl Rollbar Notifier
    slug: rollbar-perl
    description: A solution for logging basic messages to the Rollbar monitoring service from a Perl application. Lightweight alternative to WebService::Rollbar::Notifier.
    published_on: July 10, 2018
    github_url: https://gist.github.com/jmodjeska/b2ed67c6901622fe35094595b7e456ac#file-rollbar-pl
    github_url_name: rollbar.pl
    post_content: |2
      <p>Here&rsquo;s a simple way to log to <a href="https://rollbar.com/">Rollbar</a> with Perl. I found that <a href="https://github.com/zoffixznet/WebService-Rollbar-Notifier">WebService::Rollbar::Notifier</a> didn&rsquo;t compile without failures, and didn&rsquo;t work out of the box. Since all I needed was basic logging, I rolled my own solution.</p>
      <div class="gist-container">
        <script src="https://gist.github.com/jmodjeska/b2ed67c6901622fe35094595b7e456ac.js"></script>
      </div>
  - title: Fanyi Translation Script
    slug: fanyi-translation-script
    description: Fanyi is a proof-of-concept translation script that employs the free Microsoft Translator API to translate a newline-separated text file, line by line, into almost any language.
    published_on: April 10, 2018
    github_url: https://github.com/jmodjeska/fanyi
    github_url_name: fanyi
    post_content: |2
      <p>Fanyi is a translation script that employs the free <a href="http://www.microsoft.com/en-us/translator/getstarted.aspx">Microsoft Translator API</a> in order to translate a newline-separated text file, line by line, into almost any language. I wrote it to facilitate an internationalization proof-of-concept. Of course it isn&rsquo;t meant for production use since the quality of the translations will be poor.</p>
      <p>The script allows for a custom list of excluded words or phrases, so you can exempt from translation your brand names, HTML entities, and other untranslatable strings. Since each line is treated as a single entity, excluded strings are skipped, then merged back in.</p>
      <h2>Example</h2>
      <p>Translate a three-line file into Chinese, excluding HTML entities and two brand names.</p>
      <p><b>Input</b>:</p>
      <pre>Acme company product home page
      Click &lt;b&gt;here&lt;/b&gt; to login
      Read about Acme's new product, the Cornballer!
      </pre>
      <p><b>Output</b>:</p>
      <pre>Acme &#20844;&#21496;&#20135;&#21697;&#20027;&#39029;
      &#28857;&#20987;&lt;b&gt;&#36825;&#37324;&lt;/b&gt;&#30331;&#24405;
      &#38405;&#35835;Acme&#30340;&#26032;&#20135;&#21697;, Cornballer!
      </pre>
      <h2>Usage Synopsis</h2>
      <p>Single file conversion:</p>

      <pre>
        perl fanyi.pl input_filename.txt output_filename.txt
      </pre>

      <br>

      <p>Multiple file conversion recursively through a directory tree:</p>

      <pre>
        find /path/to/target_directory -type f -exec sh -c '
        perl /path/to/fanyi.pl $0 $0.new &amp;&amp;
        mv $0.new $0
        ' {} \;
      </pre>
  - title: Short URL Generator for Playground Plus Talkers
    slug: short-url-generator-for-playground-plus-talkers
    description: Short link generator that you can build into your Playground Plus talker, as found on UberWorld.
    published_on: March 29, 2018
    github_url: https://github.com/jmodjeska/pgplus_shortlink
    github_url_name: pgplus_shortlink
    post_content: |2
      <p>A short link generator that you can build into your <a href="https://github.com/talkers/pgplus">Playground Plus</a> talker.</p>
      <h2>Usage</h2>
      <pre>$ mlink http://thisisaverylongurlexample.com/omg=12345

      =================== You have added the following link:  ===================

      http://thisisaverylongurlexample.com/omg=12345

      Short link to this URL is: http://talker_url.org/url/e123.
      To share this link with the room, type 'link e123'.
      To share on a multi or channel, use clink, rlink, etc.

      ===========================================================================
      </pre>
      <h2>Live Example</h2>
      <p>This code is running on the <a href="https://uberworld.org">UberWorld</a> talker, where I created this link: <a href="http://uberworld.org/url/e296">http://uberworld.org/url/e296</a>.</p>
  - title: Flight Tracker
    slug: flight-tracker
    description: Ruby-based, open-source flight tracker project featuring a Sinatra-powered server, an inbound flight simulator, a tracker backed by a SQLite database, and a frontend built with jqPlot, Bootstrap, and jQuery.
    published_on: December 5, 2015
    github_url: https://github.com/jmodjeska/flighttracker
    github_url_name: flighttracker
    post_content: |2
      <p>Here&rsquo;s a <a href="https://github.com/jmodjeska/flighttracker">flight tracker project</a> I made for a Ruby class. It has a Sinatra-powered server, an inbound flight simulator, a tracker backed by a SQLite database, and a frontend built with jqPlot, Bootstrap, and some rather sloppy jQuery. Full project description and design spec are on the Github project page.</p>
      <p><a href="https://github.com/jmodjeska/flighttracker"><img decoding="async" src="https://i.modjeska.us/2015/12/tracker_screenshot.png" alt="tracker_screenshot" width="100%"></a></p>
  - title: Project-Style (WBS) Numbering in MS Excel
    slug: project-style-wbs-numbering-in-ms-excel
    description: WBS numbering in Excel. Excel doesn&rsquo;t natively support MS Project-style work breakdown structure &mdash; WBS numbering &mdash; in outline format (1.1.1, 1.1.2, etc.). This Excel VBA function lets you use a spreadsheet like a project plan by automatically generating WBS numbers.
    published_on: March 31, 2009
    github_url: https://gist.github.com/jmodjeska/2b589fb92486e8bb0fc1364ca8157efc
    github_url_name: wbs.vbs
    post_content: |2
      <p>If you know why you&rsquo;re reading this already, skip to the code. Otherwise, here&rsquo;s some explanation. In a project Work Breakdown Structure (WBS), tasks are organized into major tasks, sub-tasks, sub-sub-tasks, etc. as in the following example which is an actual project plan used by NASA:</p>
      <p><img decoding="async" width="300" height="290" src="https://i.modjeska.us/2009/03/xltasks-300x290.png" alt="Project plan screenshot" class="left size-large wp-image-1369" style="width: 400px;" srcset="https://i.modjeska.us/2009/03/xltasks-300x290.png 300w, https://i.modjeska.us/2009/03/xltasks.png 401w" sizes="(max-width: 300px) 100vw, 300px"></p>
      <p><br style="clear:both;"></p>
      <p>Instead of sequentially numbering the tasks, we assign subtask numbers to those tasks that roll up under other tasks. <em>Assemble spaceship</em> is a subtask of <em>Build a spaceship</em> so it gets <em>Build a spaceship</em>&lsquo;s number (1) plus a subtask number (3, since it&rsquo;s the third subtask) so its WBS number is 1.3. <em>Attach top part to middle part</em> is a subtask of <em>Assemble spaceship</em>, so it gets 1.3 plus a sub-subtask number (1.3.1), and so on. MS Project also bolds any items with subtasks.</p>
      <p>Since this type of WBS or outline numbering functionality isn&rsquo;t available in Excel, it requires a VBA macro.</p>
      <h2>Notes</h2>
      <ol class="bignum">
        <li><span aria-label="1">1.</span>
          <p><strong><a href="https://i.modjeska.us/2009/03/wbs_numbering.xlsm.zip">Here is a sample spreadsheet</a></strong>, complete with the code and a command button, for those who want something ready-to-use.</p>
        </li>
        <li><span aria-label="2">2.</span>
          <p>Tested in Excel 2003 and 2007 for Windows.</p>
        </li>
        <li><span aria-label="3">3.</span>
          <p>The macro is based on the concept that the indentation of a particular task in column B dictates its WBS &ldquo;depth&rdquo; (whether it&rsquo;s a task, sub-task, sub-sub-task, etc.). WBS numbering will be created in column A.</p>
        </li>
        <li><span aria-label="4">4.</span>
          <p>The macro renumbers everything at once, so after you add this macro to your project&rsquo;s VB code, create a button or other control that runs the macro.</p>
        </li>
        <li><span aria-label="5">5.</span>
          <p>It requires certain formatting. Read all of the formatting assumptions, commented at the top of the macro.</p>
        </li>
      </ol>
      <h2>VBA Code for WBS numbering in Excel</h2>
      <br>
      <div class="gist-container">
        <script src="https://gist.github.com/jmodjeska/2b589fb92486e8bb0fc1364ca8157efc.js"></script>
      </div>